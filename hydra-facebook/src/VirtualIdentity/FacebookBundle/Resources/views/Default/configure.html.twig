{% extends 'VirtualIdentityFacebookBundle::base.html.twig' %}

{% block title %} configuration{% endblock %}

{% block head %}
    <script>
        (function($) {
            var button;

             // keep track of how many email fields have been rendered
            var apiRequestsCount = '{{ form.apiRequests | length }}';

            $(document).ready(function() {

                window.fbAsyncInit = function() {
                    FB.init({ appId: '{{ form.appId.vars.value }}', //change the appId to your appId
                        status: true,
                        cookie: true,
                        xfbml: true,
                        oauth: true}
                    );

                    function showLoader(status){
                        /*
                        if (status) {
                            $('#loader').show();
                        } else {
                            $('#loader').hide();
                        }
                        */
                    }

                    function shortTermAccessTokenReceived(response, info){
                        if (response.authResponse) {
                            var shortTermAccessToken = response.authResponse.accessToken;

                            $.ajax({
                                url: '{{ path('virtual_identity_facebook_callbackurl') }}',
                                data: {
                                    shortTermAccessToken: shortTermAccessToken
                                }
                            }).done(function(data) {
                                $('#configurationEntity_token').val(data.longTermAccessToken);
                            });

                            showLoader(false);
                        }
                    }

                    function updateButton(response) {
                        button = document.getElementById('facebook-authorize');

                        //user might not have connected to app or logged out, we register the clickhandler anyways
                        $('#facebook-authorize').on('click', function() {
                            showLoader(true);
                            FB.login(function(response) {
                                if (response.authResponse) {
                                    FB.api('/me', function(info) {
                                        shortTermAccessTokenReceived(response, info);
                                    });
                                } else {
                                    //user cancelled login or did not grant authorization
                                    showLoader(false);
                                }
                            }, {scope: $('#configurationEntity_permissions').val()});
                        });
                    }

                    // run once with current status and whenever the status changes
                    FB.getLoginStatus(updateButton);
                    FB.Event.subscribe('auth.statusChange', updateButton);
                };

                (function() {
                    var e = document.createElement('script'); e.async = true;
                    e.src = document.location.protocol
                        + '//connect.facebook.net/en_US/all.js';
                    document.getElementById('fb-root').appendChild(e);
                }());

                $('#add-another-api-request').click(function() {
                    var apiRequestList = $('#api-requests-list');

                    // grab the prototype template
                    var newWidget = apiRequestList.attr('data-prototype');
                    // replace the "__name__" used in the id and name of the prototype
                    // with a number that's unique to your emails
                    // end name attribute looks like name="contact[emails][2]"
                    newWidget = newWidget.replace(/__name__/g, apiRequestsCount);
                    apiRequestsCount++;

                    // create a new list element and add it to the list
                    var newLi = $('<li class="list-group-item"><div class="input-group"></div></li>');
                    newLi.find('div').
                        html(newWidget).
                        append('<span class="input-group-addon"><a href="javascript://" onclick="jQuery(this).parents(\'li\').remove()">✘</a></span>');
                    newLi.appendTo($('#api-requests-list'));

                    return false;
                });
            });
        })(jQuery);
    </script>
{% endblock %}

{% block body %}
            <div class="col-lg-8">
                <header>
                    <h1>virtual-identity Hydra Facebook configuration</h1>
                    <h3>Status:
                    {% if credentialsValid %}
                        <span class="label label-success">Credentials are valid</span>
                    {% else %}
                        <span class="label label-danger">Credentials are either incorrectly configured or not valid anymore</span>
                    {% endif %}
                    </h3>
                </header>
            </div>
            <div class="col-lg-4" style="padding-top: 2em">
                {% include 'VirtualIdentityFacebookBundle::nav.html.twig' with {'active': 'configure', 'credentialsValid': credentialsValid} %}
            </div>
        </div>
        <div class="row">
            <div class="col-lg-8">

                <section>
                {{ form_start(form) }}
                    <fieldset>

                        {# store the prototype on the data-prototype attribute #}
                        <ul id="api-requests-list" data-prototype="{{ form_widget(form.apiRequests.vars.prototype, {'attr': {'class': 'form-control'}}) | e }}" class="list-group">
                            <li class="list-group-item">
                                {{ form_label(form.apiRequests) }}
                                <button type="button" class="btn btn-default btn-mini" id="add-another-api-request">Add API request URL</button>
                            </li>
                        {% for apiRequest in form.apiRequests %}
                            <li class="list-group-item">
                                <div class="input-group">
                                    {{ form_errors(apiRequest) }}
                                    {{ form_widget(apiRequest, {'attr': {'class': 'form-control'}}) }}
                                    <span class="input-group-addon"><a href="javascript://" onclick="jQuery(this).parents('li').remove()">✘</a></span>
                                </div>
                            </li>
                        {% endfor %}
                        </ul>

                        <div class="form-group">
                            {{ form_errors(form.appId) }}
                            {{ form_label(form.appId) }}
                            {{ form_widget(form.appId, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_errors(form.appSecret) }}
                            {{ form_label(form.appSecret) }}
                            {{ form_widget(form.appSecret, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_errors(form.permissions) }}
                            {{ form_label(form.permissions) }}
                            {{ form_widget(form.permissions, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        <div class="form-group">
                            {{ form_errors(form.token) }}
                            {{ form_label(form.token) }}
                            {{ form_widget(form.token, {'attr': {'class': 'form-control'}}) }}
                        </div>

                        {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary'}}) }}

                        {% if form.appId.vars.value is empty or form.appSecret.vars.value is empty %}
                        Fill out app id and secret to get the Facebook connect button!
                        {% else %}
                        <button type="button" id="facebook-authorize" style="border:none;background:none"><img src="{{asset('bundles/virtualidentityfacebook/images/sign-in-with-facebook.png')}}" /></button>
                        {% endif %}

                    </fieldset>
                {{ form_end(form) }}
                </section>

            </div>
            <div class="col-lg-4">
                <aside>
                    <h3>Help</h3>
                    <p>
                        You can obtain the app id and secret from the details page from the
                        Facebook application management page:
                        <a href="https://developers.facebook.com/apps/">https://developers.facebook.com/apps/</a><br />
                        Just click on the app, and then on "Edit App".
                    </p>
                    <p>
                        After you filled those fields and saved the configuration you can press
                        the "Sign in with Facebook" button to obtain your long term access token.
                    </p>
                </aside>
            </div>
{% endblock %}
